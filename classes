print (" ")
print ("Classes")
print (" ")
class Compute:
	'Computes the sum of 3 variables'

	def __init__ (self, a, b, c):
		self.a = a
		self.b = b
		self.c = c

	def totalValue(self):
		total = self.a + self.b + self.c
		print (total)

	def printValue(self):
		print ("Values = %d + %d + %d" %(self.a ,self.b ,self.c))

class Student:
	'initializes a student property'
	def __init__(self, affiliation, name, year, section):
		self.name = name
		self.year = year
		self.section = section
		self.affiliation = affiliation

	def printStudentDetails(self):
		if self.affiliation is None:
			print ("Name:", self.name ,"\nYear:", self.year ,"\nSection:", self.section)
		else:			
			print ("Name:", self.name ,"\nYear:", self.year ,"\nSection:", self.section ,"\nAffilitaion:", self.affiliation)


class Athlete(Student):
	def __init__(self, sport, affiliation, name, year, section):
		self.sport = sport
		super().__init__(affiliation, name, year, section)
		
	def printAthleteAffiliationType(self):
		print ("Name:", self.name ,"\nYear:", self.year ,"\nSection:", self.section ,"\nAffilitaion:", self.affiliation, "\nSport:", self.sport)

	def printSports(self):
		print ("I play", self.sport)

class Scholar(Student):
	def __init__(self, aveGPA, affiliation, name, year, section):
		self.aveGPA = aveGPA
		super().__init__(affiliation, name, year, section)

	def printScholarAffiliationType(self):
		print ("Name:", self.name ,"\nYear:", self.year ,"\nSection:", self.section ,"\nAffilitaion:", self.affiliation, "\naveGPA:", self.aveGPA)

# REGION FUNCTION
# ----------------------------------------------------------

def checkYesNoValue(a):
	if (a in ['y', 'Y', "Yes", "yes"]):
		a = "y"
	else:
		a = "n"
	return a

def computeClass():
	checker = True
	print("Compute 3 numbers")

	while (checker == True):
		inpt1 = int(input("Enter First Number: "))
		inpt2 = int(input("Enter Second Number: "))
		inpt3 = int(input("Enter Third Number: "))	
		
		bindAndPrintComputeValues(inpt1, inpt2, inpt3)
		cont = input("do you want to try again y/n: ")
		cont = checkYesNoValue(cont)
		if (cont == "n"):
			checker = False
		else:
			print(" ")
	return

def bindAndPrintComputeValues(inpt1, inpt2, inpt3):		
	comp = Compute(inpt1, inpt2, inpt3)
	comp.printValue()
	comp.totalValue()
	
	print(" ")
	print(" ")
	return

def getStudent():
	checker = True
	print("Get Student Details")

	while (checker == True):
		inpt1 = input("Student Name: ")
		inpt2 = input("Year Level: ")
		inpt3 = input("Section: ")
		inpt4 = input("With Affiliation? y/n: ")

		inpt4 = checkYesNoValue(inpt4)
		if (inpt4 == "n"):
			bindAndPrintStudent(inpt1, inpt2, inpt3)
		else:
			inpt4 = getAffiliation()
			inpt5 = getAffilOutput(inpt4)
			
			if(inpt4 == "Sports"):
				bindAndPrintStudent(inpt1, inpt2, inpt3, inpt4, inpt5)
			else:
				bindAndPrintStudent(inpt1, inpt2, inpt3, inpt4, None, inpt5)
		cont = input("add another student? y/n: ")
		cont = checkYesNoValue(cont)
		if (cont == "n"):
			checker = False
		else:
			print(" ")

def getAffiliation():
	inpt1 = input("Enter Affiliation: (Athlete/Scholar) ")
	inpt1 = checkAffilValue(inpt1)
	return inpt1

def checkAffilValue(a):
	if (a in ['athlete', 'Athlete', 'sports', 'Sports']):
		a = "Sports"
	else:
		a = "Scholar"
	return a

def getAffilOutput(inpt1):
	if(inpt1 == "Sports"):
		inpt1 = input("Enter Sports: ")
	else:
		inpt1 = input("Enter Ave GPA: ")
	return inpt1

def bindAndPrintStudent(stdntName, yrLvl, section, affiliation = None, sport = "", aveGPA = ""):
	if (affiliation == None):
		stud = Student(None, stdntName, yrLvl, section)
		print(" ")		
		stud.printStudentDetails()
		print(" ")
	elif(affiliation == "Sports"):
		stud = Athlete(sport,affiliation, stdntName, yrLvl, section)
		print(" ")
		print("print parent class using child class Athlete")
		stud.printStudentDetails()
		print(" ")
		print(" ")
		print("print child class Athlete details")
		stud.printAthleteAffiliationType()
		print(" ")
		stud.printSports();
		print(" ")
		print(" ")
	else:
		stud = Scholar(aveGPA,affiliation,stdntName,yrLvl,section)
		print(" ")
		print("print child class Scholar details")
		stud.printScholarAffiliationType()
		print(" ")
		print(" ")
		print("print parent class using child class Scholar")
		stud.printStudentDetails()
	return
	

# REGION FUNCTION CALLS
# --------------------------------------------------------------

computeClass()
print (" ")
getStudent()





